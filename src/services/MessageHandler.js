const ConfigManager = require('../utils/ConfigManager');
const Logger = require('../utils/Logger');

class MessageHandler {
    #whatsapp;
    #emtuService;
    #configManager;
    #logger;

    constructor(wppService, emtuService){
        this.#whatsapp = wppService;
        this.#emtuService = emtuService;
        this.#configManager = new ConfigManager();
        this.#logger = new Logger();
    }

    setupMessageHandlers() {
        this.#whatsapp.onMessage(async (message) => {
            try {
                const response = await this.handleUserMessage(message);
                if (response) {
                    await this.#whatsapp.sendMessage(message.from, response);
                }
            } catch (error) {
                this.#logger.error('Error handling message:', error);
                await this.#whatsapp.sendMessage(
                    message.from, 
                    'Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente.'
                );
            }
        });
    }

    async handleUserMessage(message) {
        const text = message.body.toLowerCase().trim();
        const chatId = message.from;

        // Help command
        if (text === '/help' || text === 'ajuda') {
            return this.getHelpMessage();
        }

        // Start monitoring command
        if (text.startsWith('/monitor')) {
            return await this.handleMonitorCommand(text, chatId);
        }

        // Stop monitoring command
        if (text.startsWith('/stop')) {
            return await this.handleStopCommand(text, chatId);
        }

        // List active monitors
        if (text === '/list' || text === 'listar') {
            return await this.handleListCommand(chatId);
        }

        // Search routes
        if (text.startsWith('/search') || text.startsWith('buscar')) {
            return await this.handleSearchCommand(text);
        }

        // Status command
        if (text === '/status') {
            return await this.handleStatusCommand(chatId);
        }

        return 'Comando n√£o reconhecido. Digite "ajuda" para ver os comandos dispon√≠veis.';
    }

    getHelpMessage() {
        return `
        
        üöå *EMTU Live Checker - Comandos Dispon√≠veis:*
        
        üìç *Monitoramento:*
        ‚Ä¢ \`/monitor [linha] [parada]\` - Iniciar monitoramento
        ‚Ä¢ \`/stop [linha]\` - Parar monitoramento
        ‚Ä¢ \`/list\` - Listar monitoramentos ativos

        üîç *Consultas:*
        ‚Ä¢ \`/search [linha]\` - Buscar horarios
        ‚Ä¢ \`/status\` - Status dos monitoramentos

        ‚ÑπÔ∏è *Ajuda:*
        ‚Ä¢ \`/help\` ou \`ajuda\` - Mostrar esta mensagem

        *Exemplo de uso:*
        \`/monitor 001 Terminal S√£o Mateus\`

        O bot ir√° te notificar quando o √¥nibus estiver pr√≥ximo da parada configurada! üîî`;
    }

    async handleMonitorCommand(text, chatId) {
        const parts = text.split(' ').slice(1); // Remove '/monitor'
        
        if (parts.length < 4) {
            // eslint-disable-next-line max-len
            return 'Uso correto: `/monitor [linha] [numero ponto] [sentido] [hora]`\nExemplo: `/monitor 709 01 volta 09:00`';
        }

        const routeNumber = parts[0];
        const stopName = parts[1];
        const way = (parts[2]).toLowerCase();
        const timeTrigger = parts[3];

        try {
            // Validate route and stop
            const route = await this.#emtuService.findRoute(routeNumber);

            if (!route) {
                return `‚ùå Linha "${routeNumber}" n√£o encontrada. 
                Use \`/search ${routeNumber}\` para buscar linhas similares.`;
            }

            if (!['ida', 'volta'].includes(way)){
                return `‚ùå Sentido "${way}". 
                Use ida ou volta para buscar linhas similares.`;
            }
            const testTime = timeTrigger.split(':');

            if(testTime.length < 1){
                return `‚ùå Tempo "${timeTrigger}". 
                Use este formato HH:MM. exemplo: 10:30 (Dez horas e trinta minutos)`;
            }
            const stop = await this.#emtuService.findStop(stopName, route.id);
            if (!stop) {
                return `‚ùå Parada "${stopName}" n√£o encontrada na linha ${routeNumber}.
                Use \`/search ${stopName}\` para buscar paradas.`;
            }

            // Create monitoring configuration
            const config = {
                chatId,
                routeId: route.id,
                routeNumber: route.number,
                stop: stop,
                triggerTime: timeTrigger,
                way: way,
                proximityThreshold: parseInt(process.env.PROXIMITY_THRESHOLD_METERS) || 500,
                maxAlerts: parseInt(process.env.MAX_ALERTS_PER_ROUTE) || 5,
                createdAt: new Date(),
                isActive: true
            };

            await this.#configManager.saveConfiguration(chatId, routeNumber, config);

            await this.startMonitoring(config);

            return `‚úÖ Monitoramento iniciado!
            üöå Linha: ${route.number} - ${route.name}
            üìç Parada: ${stop.name}
            üìè Dist√¢ncia de alerta: ${config.proximityThreshold}m

            Voc√™ ser√° notificado quando um √¥nibus estiver se aproximando da parada.
            
            `;

        } catch (error) {
            this.#logger.error('Error in monitor command:', error);
            return '‚ùå Erro ao configurar monitoramento. Tente novamente.';
        }
    }

    async handleStopCommand(text, chatId) {
        const parts = text.split(' ').slice(1); // Remove '/stop'
        
        if (parts.length === 0) {
            // Stop all monitoring for this chat
            const stopped = await this.stopAllMonitoring(chatId);
            return stopped > 0 
                ? `‚úÖ ${stopped} monitoramento(s) interrompido(s).`
                : '‚ùå Nenhum monitoramento ativo encontrado.';
        }

        const routeNumber = parts[0];
        const stopped = await this.stopMonitoring(chatId, routeNumber);
        
        return stopped 
            ? `‚úÖ Monitoramento da linha ${routeNumber} interrompido.`
            : `‚ùå Nenhum monitoramento ativo encontrado para a linha ${routeNumber}.`;
    }

    async handleListCommand(chatId) {
        const configs = await this.#configManager.getActiveConfigurations(chatId);
        
        if (configs.length === 0) {
            return 'üìã Nenhum monitoramento ativo.\n\nUse `/monitor [linha] [parada]` para iniciar um monitoramento.';
        }

        let response = 'üìã *Monitoramentos Ativos:*\n\n';
        configs.forEach((config, index) => {
            response += `${index + 1}. üöå Linha ${config.routeNumber}\n`;
            response += `   üìç Parada: ${config.stopName}\n`;
            response += `   üìè Dist√¢ncia: ${config.proximityThreshold}m\n`;
            response += `   ‚è∞ Desde: ${config.createdAt.toLocaleString('pt-BR')}\n\n`;
        });

        response += 'Use `/stop [linha]` para parar um monitoramento espec√≠fico.';
        return response;
    }

    async handleSearchCommand(text) {
        const searchTerm = text.split(' ').slice(1).join(' '); // Remove '/search' or 'buscar'
        
        if (!searchTerm) {
            return 'Uso correto: `/search [termo]`\nExemplo: `/search 708`';
        }

        try {
            // Usando searchTerm como routeNumber tamb√©m, j√° que a API precisa de um n√∫mero de linha
            const [routes, stops] = await Promise.all([
                this.#emtuService.searchRoutes(searchTerm, searchTerm),
                this.#emtuService.searchStops(searchTerm, searchTerm)
            ]);

            let response = `üîç *Resultados da busca por "${searchTerm}":*\n\n`;

            if (routes.length > 0) {
                response += 'üöå *Linhas encontradas:*\n';
                routes.slice(0, 5).forEach(route => {
                    response += `‚Ä¢ ${route.number} - ${route.name}\n`;
                });
                if (routes.length > 5) {
                    response += `... e mais ${routes.length - 5} linhas\n`;
                }
                response += '\n';
            }

            if (stops.length > 0) {
                response += 'üìç *Paradas encontradas:*\n';
                stops.slice(0, 5).forEach(stop => {
                    response += `‚Ä¢ ${stop.name}\n`;
                });
                if (stops.length > 5) {
                    response += `... e mais ${stops.length - 5} paradas\n`;
                }
            }

            if (routes.length === 0 && stops.length === 0) {
                response += '‚ùå Nenhum resultado encontrado.';
            }

            return response;
        } catch (error) {
            this.#logger.error('Error in search command:', error);
            return '‚ùå Erro ao realizar busca. Tente novamente.';
        }
    }

    async handleStatusCommand(chatId) {
        const configs = await this.#configManager.getActiveConfigurations(chatId);
        // Removendo a parte de alertas por enquanto j√° que n√£o temos o alertManager
        const alertStats = { today: 0, total: 0 };

        return `
                üìä *Status do Sistema:*
        üë§ *Seus monitoramentos:* ${configs.length}
        üîî *Alertas enviados hoje:* ${alertStats.today}
        üìà *Total de alertas:* ${alertStats.total}
        ‚è±Ô∏è *Sistema ativo h√°:* ${this.formatUptime(process.uptime())}
        ‚úÖ *Status:* Online

        Use \`/list\` para ver detalhes dos monitoramentos ativos.`;
    }
}

module.exports = MessageHandler;